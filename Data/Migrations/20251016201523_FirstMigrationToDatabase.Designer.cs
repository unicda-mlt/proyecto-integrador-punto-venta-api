// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251016201523_FirstMigrationToDatabase")]
    partial class FirstMigrationToDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Rol", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime?>("ActualizadoEn")
                        .HasColumnType("datetime2")
                        .HasColumnName("actualizado_en");

                    b.Property<DateTime>("CreadoEn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("creado_en")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreadoEn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "ADMIN"
                        });
                });

            modelBuilder.Entity("Domain.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<DateTime?>("ActualizadoEn")
                        .HasColumnType("datetime2")
                        .HasColumnName("actualizado_en");

                    b.Property<DateTime>("CreadoEn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("creado_en")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit")
                        .HasColumnName("eliminado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("nombre");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("password");

                    b.Property<short>("RolId")
                        .HasColumnType("smallint")
                        .HasColumnName("rol_id");

                    b.Property<string>("UsuarioNombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("usuario_nombre");

                    b.HasKey("Id")
                        .HasName("pk_usuarios");

                    b.HasIndex("RolId")
                        .HasDatabaseName("ix_usuarios_rol_id");

                    b.HasIndex("UsuarioNombre")
                        .IsUnique()
                        .HasDatabaseName("udx_usuario_nombre")
                        .HasFilter("[Eliminado] = 0");

                    b.HasIndex("Eliminado", "Activo")
                        .HasDatabaseName("idx_usuario_eliminado_activo");

                    b.ToTable("usuarios", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bfe03e22-65e4-4007-8420-07c1b53c4726"),
                            Activo = true,
                            CreadoEn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Eliminado = false,
                            Nombre = "Admin",
                            Password = "9U0zeOGybSi5hk81k/nFzw==.FN5jpe1k2hAMfU0SIg2QuTiwVdhsFdYsC1ykHHAwkzk=",
                            RolId = (short)1,
                            UsuarioNombre = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Models.Usuario", b =>
                {
                    b.HasOne("Domain.Models.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("usuarios_fk_rol_id");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Domain.Models.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
